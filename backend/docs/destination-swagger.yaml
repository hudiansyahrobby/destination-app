openapi: 3.0.0

info:
  title: "Destination APP API"
  description: "API for destination app"
  version: "1.0.0"
servers:
  - url: http://localhost:3000/api/v1
paths: 
  /destinations:
    post:
      description: "Create new destination (ONLY ADMIN)"
      tags:
        - "Destinations"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf: 
                - $ref: '#/components/schemas/Destination'
      responses:
        201:
          description: "Created"
        401:
          description: "Access Denied"
        422:
          description: "Validation Error"
        500:
          description: "Server Error"
    get:
      description: "Get All Destinations"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Destination list at particular page  
        - in: query
          name: size
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: search
          schema:
            type: string
          description: Search items
        - in: query
          name: sort
          schema:
            type: string
            enum: [latest, oldest]
          description: sort destination by latest or oldest
      tags:
        - "Destinations"
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"
  /destinations/{id}:
    get:
      description: "Get Destination detail"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: Get destination detail by id  
      tags:
        - "Destinations"
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"
    put:
      description: "update destination by id (ONLY ADMIN)"
      tags:
        - "Destinations"
      parameters:
      - in: path
        required: true
        name: id
        schema:
          type: integer
        description: update destination detail by id  
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf: 
                - $ref: '#/components/schemas/Destination'
      responses:
        200:
          description: "OK"
        401:
          description: "Access Denied"
        422:
          description: "Validation Error"
        500:
          description: "Server Error"
    delete:
      description: "Delete destination by id (ONLY ADMIN)"
      parameters:
      - in: path
        required: true
        name: id
        schema:
          type: integer
        description: Get destination detail by id  
      security:
        - bearerAuth: []
      tags:
        - "Destinations"
      responses:
        200:
          description: "OK"
        400:
          description: "Destination not found"
        500:
          description: "Server Error"
components:
  schemas:
    Destination:
      type: object
      properties:
        name:
          type: string
          example: "Pantai Mapak"
        city:
          type: string
          example: "Mataram"
        province:
          type: string
          example: "NTB"
        categoryId:
          type: number
          example: 1
        description:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. "
        images: 
          type: string
          format: binary
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  

    

  